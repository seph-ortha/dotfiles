######### Seph's Shell Functions
##        _          _ _    __                  _   _                 
##    ___| |__   ___| | |  / _|_   _ _ __   ___| |_(_) ___  _ __  ___ 
##   / __| '_ \ / _ \ | | | |_| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
##   \__ \ | | |  __/ | | |  _| |_| | | | | (__| |_| | (_) | | | \__ \
##   |___/_| |_|\___|_|_| |_|  \__,_|_| |_|\___|\__|_|\___/|_| |_|___/
##
### -------------------------------------------------------------------

######### --------- • Functions

# --------- Bash Functions


# --------- Shell Functions
pathadd() { 
    if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
        PATH="${PATH:+"$PATH:"}$1"
    fi ## Add a directory to PATH
}
checkShell() {
    case "$-" in 
        *i*) echo This shell is interactive;;
        *) echo This shell is not interactive;;
    esac
}
shellHelp() {
    echo
    echo "${pink201}===${norm} ${purple153}Seph's Shell Help${norm} ${pink201}===${norm}"
    echo 
    echo "${pink212}---------${norm} ${blue81}Keyboard Shortcuts${norm} ${pink212}---------${norm}"
    echo
    echo "           ${green50}^r${norm}       ${yellow192}Refresh Shell${norm}"
    echo "           ${green50}^e${norm}       ${yellow192}Explore Files with lf${norm}"
    echo "           ${green50}^v${norm}       ${yellow192}Vim explore current directory${norm}"
    echo "           ${green50}^s${norm}       ${yellow192}Create new bash script${norm}"
    echo "           ${green50}^]${norm}       ${yellow192}Load music deamon and client${norm}"
    echo "           ${green50}^[${norm}       ${yellow192}Unload music deamon and client${norm}"
    echo "           ${green50}^\\${norm}       ${yellow192}Music Client${norm}"
    echo "           ${green50}^h${norm}       ${yellow192}Help page${norm}"
    echo
    echo "${pink212}--------------------------------------${norm}"
    echo 
    echo "${pink212}---------${norm} ${blue81}Shell Commands${norm} ${pink212}---------${norm}"
    echo
    echo "  ${green50}show-path${norm}         ${yellow192}List of elements in PATH.${norm}"
    echo "  ${green50}bash-script${norm}       ${yellow192}Create new bash script utility.${norm}"
    echo "  ${green50}netvid${norm}            ${yellow192}Downloads videos from websites.${norm}"
    echo "  ${green50}bookmarks${norm}         ${yellow192}Displays the web bookmarks.${norm}"
    echo "  ${green50}fontbook${norm}          ${yellow192}Show installed fonts.${norm}"
    echo
    echo "${pink212}----------------------------------${norm}"
    echo
    echo "${pink201}==================================${norm}"
}
neofetchGreeting() {
    tput clear ## clear the screen
    # neofetch ASCII art
    neofetch --ascii ~/.config/neofetch/ascii_art/bloom
    # Seph's Personal Greeting
    printf "how ya doin.. Welcome to the shell! v.%s\n%s, you're at %s\nit's %s\n..time to do something radical!\n\n" "$SHELL" "$(whoami)" "$(pwd)" "$(date)"
}
shell_add_file() {
    [ -f "$XDG_CONFIG_HOME/shell/$1" ] && source "$XDG_CONFIG_HOME/shell/$1"
}
myShells() {
    awk -F "/" '/^\// {print $NF}' /etc/shells
}
depositFxSound () {
    mv "${1}" "${HOME}/Library/Sounds" &&
    echo "..sound moved to ${HOME}/Library/Sounds"
}

############ --- Utility
lfcd() {
    tmp="$(mktmp)"
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp"
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}
edit_text() {
    vim ## --- • Edit Text
}
write_script() {
    learn-bash ## --- • Write Script
}
musicOn () {
    music_daemon
    music_client
}
musicOff () {
    killall music_client
    killall mpd
}
musicPlayer () {
    ${music_client}
}
###
######### --- Design Utility
repeatChar() {
    printf "%$(tput cols)s\n" " " | tr " " "$1"
}
centerLine() {
    for i in $1; do
        printf "%*s\n" $(((COLUMNS+${#1})/2)) "$1"
    done
}
centerString() {
    width=$(tput cols)
    textsize=${#1}
    span=$((($width + $textsize) / 2))
    for line in "$1"; do
        printf "%${span}s\n" "$line"
    done
}
centerStringColor() {
    width=$(tput cols)
    textsize=${#1}
    span=$((($width + $textsize + $2) / 2))
    for line in "$1"; do
        printf "%${span}s\n" "$line"
    done
}

printColors() {
    tput clear
    tput bold
    tput setaf 86
    tput cup 2 24
        echo -e "There are 256 terminal colors.\n\n"
    tput cup 3 24
        echo -e "tput setaf #; tput sgr0 resets\n\n"
    tput sgr0
    # Loop colors in a row:
    for i in $(seq 1 256); do
        tput setaf "$i"
        echo -e "██\c"
    done; echo
    for i in $(seq 1 256); do
        tput setaf "$i"
        echo -e "█$i \c"
    done; echo
}

# --------- Git Functions
gitBranchName () {
    branch=$(git symbolic-ref HEAD 2> /dev/null | awk 'BEGIN{FS="/"} {print $NF}')
    if [[ ${branch} == "" ]];
    then
    :
    else
    echo '- ('${branch}')'
    fi
}
### -------------------------------------------------------------------
